{"version":3,"sources":["containers/PoppedContent/selectors.js","containers/PoppedContent/index.js","containers/WorkOrderList/actions.js","containers/WorkOrderList/constants.js","containers/AssignmentTable/actions.js","containers/AssignmentTable/constants.js","containers/AssignmentTable/index.js","containers/WorkOrderList/index.js","containers/App/index.js","serviceWorker.js","containers/AssignmentTable/reducer.js","containers/WorkOrderList/reducer.js","reducer.js","containers/AssignmentTable/selectors.js","containers/AssignmentTable/saga.js","containers/WorkOrderList/saga.js","index.js"],"names":["calculateWorkOrders","state","date","temp","workOrderList","jobs","forEach","job","workOrders","push","jobName","workOrderName","withConnect","connect","dateIndex","dispatch","employeeIndex","employeeName","handleClose","assignTask","workOrder","type","updateEmployeeAssignment","style","padding","length","map","index","Paper","key","className","onClick","Divider","variant","Typography","memo","isLoading","assignmentTable","employees","error","fetchEmployees","saveEmployeeAssignment","useState","anchorEl","setAnchorEl","setDateIndex","setEmployeeIndex","setEmployeeName","handleClick","event","currentTarget","open","Boolean","id","undefined","useEffect","Grid","container","item","justify","CircularProgress","color","xs","Button","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","employee","component","scope","Name","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","minHeight","minWidth","fetchWorkOrders","compose","App","window","location","hostname","match","initialState","combineReducers","action","temp1","mappedWorkOrders","workorders","Date","getDate","name","jobname","jobsAssigned","i","temp2","j","temp3","Employee","selectEmployeesState","fetchEmployeesSaga","saveEmployeeAssignmentSaga","put","fetch","then","response","json","Employess","select","employeesState","method","body","JSON","stringify","takeLatest","fetchWorkOrdersSaga","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","assignmentTableSaga","workOrderListSaga","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oZAAO,IAAMA,EAAsB,SAACC,EAAOC,GACzC,IAAIC,EAAO,GAKX,OAJAF,EAAMG,cAAcC,KAAKC,SAAQ,SAACC,GAChCA,EAAIC,WAAWN,IACbC,EAAKM,KAAK,CAAEC,QAASH,EAAIG,QAASC,cAAeJ,EAAIC,WAAWN,QAE7DC,GCyBT,IAkBMS,EAAcC,aAlBI,SAACZ,EAAD,GAA2B,IAAjBa,EAAgB,EAAhBA,UAChC,MAAO,CACLN,WAAYR,EAAoBC,EAAOa,OAGhB,SACzBC,EADyB,GAGrB,IADFD,EACC,EADDA,UAAWE,EACV,EADUA,cAAeC,EACzB,EADyBA,aAAcC,EACvC,EADuCA,YAE1C,MAAO,CACLC,WAAY,SAACC,GACXL,ECbC,SAAoBD,EAAWG,EAAcG,GAClD,MAAO,CACLC,KC3BuB,cD4BvBP,YACAG,eACAG,aDQWD,CAAWL,EAAWG,EAAcG,IAC7CL,EGfC,SAAkCD,EAAWE,EAAeI,GACjE,MAAO,CACLC,KCzBqC,4BD0BrCP,YACAE,gBACAI,aHUWE,CAAyBR,EAAWE,EAAeI,IAE5DF,QAIcL,EA3CpB,YAAoD,IAA3BL,EAA0B,EAA1BA,WAAYW,EAAc,EAAdA,WACnC,OACE,yBAAKI,MAAO,CAAEC,QAAS,KACpBhB,EAAWiB,OACVjB,EAAWkB,KAAI,SAACN,EAAWO,GACzB,OACE,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,UAAU,iBACVC,QAAS,kBAAMZ,EAAWC,KAEzBA,EAAUT,cACX,kBAACqB,EAAA,EAAD,CAASC,QAAQ,WAChBb,EAAUV,YAKjB,kBAACwB,EAAA,EAAD,CAAYD,QAAQ,SAApB,wCA0BOE,iBAAKvB,GK+GpB,IAAMA,EAAcC,aAdpB,SAAyBZ,GACvB,MAAO,CACLmC,UAAWnC,EAAMoC,gBAAgBD,UACjCE,UAAWrC,EAAMoC,gBAAgBC,UACjCC,MAAOtC,EAAMoC,gBAAgBE,UAGjC,SAA4BxB,GAC1B,MAAO,CACLyB,eAAgB,kBAAMzB,EFlJjB,CACLM,KCX2B,sBC6J3BoB,uBAAwB,kBAAM1B,EFvHzB,CACLM,KChC6B,0BC0JbR,EA3IpB,YAMI,IALFuB,EAKC,EALDA,UACAE,EAIC,EAJDA,UACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,eACAC,EACC,EADDA,uBACC,EAC+BC,mBAAS,MADxC,mBACMC,EADN,KACgBC,EADhB,OAEiCF,mBAAS,IAF1C,mBAEM5B,EAFN,KAEiB+B,EAFjB,OAGyCH,mBAAS,IAHlD,mBAGM1B,EAHN,KAGqB8B,EAHrB,OAIuCJ,mBAAS,IAJhD,mBAIMzB,EAJN,KAIoB8B,EAJpB,KAMKC,EAAc,SAAClC,EAAWE,EAAeC,GAC7C,OAAO,SAACgC,GACNL,EAAYK,EAAMC,eAClBL,EAAa/B,GACbgC,EAAiB9B,GACjB+B,EAAgB9B,KAIdC,EAAc,WAClB0B,EAAY,OAGRO,EAAOC,QAAQT,GACfU,EAAKF,EAAO,sBAAmBG,EAKrC,OAHAC,qBAAU,WACRf,MACC,IAED,kBAACgB,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,QAAQ,YAC1BvB,EACC,kBAACwB,EAAA,EAAD,CAAkBC,MAAM,YACtBtB,EACF,kBAACL,EAAA,EAAD,4BAEA,oCACE,kBAACsB,EAAA,EAAD,CAAME,MAAI,EAACI,GAAI,GACb,kBAAC5B,EAAA,EAAD,CAAYD,QAAQ,MAApB,kBAEF,kBAACuB,EAAA,EAAD,CAAME,MAAI,EAACI,GAAI,GACb,kBAACC,EAAA,EAAD,CACE9B,QAAQ,YACR4B,MAAM,UACN9B,QAASU,GAHX,SAQF,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOnC,UAAU,SACf,kBAACoC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUrC,UAAU,WAClB,kBAACsC,EAAA,EAAD,sBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,kBAEA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,oBAGJ,kBAACC,EAAA,EAAD,KACG/B,EAAUZ,KAAI,SAAC4C,EAAUtD,GACxB,OACE,kBAACmD,EAAA,EAAD,CAAUtC,IAAKb,EAAec,UAAU,aACtC,kBAACsC,EAAA,EAAD,CAAWG,UAAU,KAAKC,MAAM,OAC7BF,EAASG,MAEXH,EAAS9D,WAAWkB,KAAI,SAACN,EAAWO,GACnC,OACE,kBAACyC,EAAA,EAAD,CACEvC,IAAKF,EACLI,QAASiB,EACPrB,EACAX,EACAsD,EAASG,OAGVrD,GACC,kBAACQ,EAAA,EAAD,CAAOE,UAAU,QACdV,EAAUT,cACX,kBAACqB,EAAA,EAAD,CAASC,QAAQ,WAChBb,EAAUV,oBAYjC,kBAACgE,EAAA,EAAD,CACErB,GAAIA,EACJF,KAAMA,EACNR,SAAUA,EACVgC,QAASzD,EACT0D,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAEdvD,MAAO,CAAEyD,UAAW,IAAKC,SAAU,MAEnC,kBAAC,EAAD,CACE/D,YAAaA,EACbJ,UAAWA,EACXE,cAAeA,EACfC,aAAcA,UA0BbkB,iBAAKvB,G,QCrDpB,IAAMA,EAAcC,aAXpB,SAAyBZ,GACvB,MAAO,CACLmC,UAAWnC,EAAMG,cAAcgC,UAC/B/B,KAAMJ,EAAMG,cAAcC,KAC1BkC,MAAOtC,EAAMG,cAAcmC,UAG/B,SAA4BxB,GAC1B,MAAO,CAAEmE,gBAAiB,kBAAMnE,ELpGzB,CACLM,KCV6B,2BIiHlB8D,cAAQhD,OAAMvB,EAAduE,EA/Ff,YAAqE,IAA5C/C,EAA2C,EAA3CA,UAAWG,EAAgC,EAAhCA,MAAO2C,EAAyB,EAAzBA,gBAAiB7E,EAAQ,EAARA,KAI1D,OAHAkD,qBAAU,WACR2B,MACC,IAED,kBAAC1B,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,QAAQ,UAC1BvB,EACC,kBAACwB,EAAA,EAAD,CAAkBC,MAAM,YACtBtB,EACF,kBAACL,EAAA,EAAD,4BAEA,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOnC,UAAU,SACf,kBAACuC,EAAA,EAAD,KACGhE,EAAKqB,KAAI,SAACnB,EAAKoB,GACd,OACE,kBAACwC,EAAA,EAAD,CAAUtC,IAAKF,EAAOG,UAAU,wBAC9B,kBAACsC,EAAA,EAAD,MAEA,kBAACA,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,UAIX,kBAAC0D,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,UAIX,kBAAC0D,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,UAIX,kBAAC0D,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,UAIX,kBAAC0D,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,UAIX,kBAAC0D,EAAA,EAAD,KACG7D,EAAIC,WAAW,IACd,kBAACoB,EAAA,EAAD,CAAOE,UAAU,QACdvB,EAAIC,WAAW,GAChB,kBAACwB,EAAA,EAAD,CAASC,QAAQ,WAChB1B,EAAIG,qBClEhB0E,MAff,WACE,OACE,oCACE,iCAEA,8BACE,kBAAC5B,EAAA,EAAD,CAAMC,WAAS,EAAC3B,UAAU,aACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,UCFUsB,QACW,cAA7BiC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCXAC,EAAe,CACnBrD,WAAW,EACXE,UAAW,GACXC,OAAO,GCFT,IAAMkD,EAAe,CACnBrD,WAAW,EACX/B,KAAM,GACNkC,OAAO,GCNMmD,kBAAgB,CAC7BrD,gBFOK,WAAwD,IAA/BpC,EAA8B,uDAAtBwF,EAAcE,EAAQ,uCAC5D,OAAQA,EAAOtE,MACb,ILdgC,uBKe9B,OAAO,2BAAKpB,GAAZ,IAAmBmC,WAAW,IAChC,ILdmC,0BKejC,IAAIjC,EAAOwF,EAAOrD,UASlB,OARAnC,EAAOA,EAAKuB,KAAI,SAAC4C,GAEf,MAAO,CACLG,KAAMH,EAASG,KACfjE,WAHqB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,UAOjD,2BACFP,GADL,IAEEmC,WAAW,EACXG,OAAO,EACPD,UAAWnC,IAEf,IL7BiC,wBK8B/B,OAAO,2BACFF,GADL,IAEEsC,OAAO,IAEX,ILjCqC,4BKkCnC,IAAIqD,EAAK,YAAO3F,EAAMqC,WAGtB,OAFAsD,EAAMD,EAAO3E,eAAeR,WAAWmF,EAAO7E,WAC5C6E,EAAOvE,UACF,2BACFnB,GADL,IAEEqC,UAAWsD,IAGf,QACE,OAAO3F,IEzCXG,cDMK,WAAsD,IAA/BH,EAA8B,uDAAtBwF,EAAcE,EAAQ,uCAC1D,OAAQA,EAAOtE,MACb,IRdkC,yBQehC,OAAO,2BACFpB,GADL,IAEEmC,WAAW,IAEf,IRlBqC,4BQmBnC,IAAIjC,EAAOwF,EAAOtF,KAalB,OAZAF,EAAOA,EAAKuB,KAAI,SAACnB,GACf,IAAIsF,EAAmB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAKtD,OAJAtF,EAAIuF,WAAWxF,SAAQ,SAACc,EAAWO,GACjCkE,EAAiB,IAAIE,KAAK3E,EAAU2E,MAAMC,UAAY,IACpD5E,EAAU6E,QAEP,CACLvF,QAASH,EAAI2F,QACb1F,WAAYqF,MAIT,2BACF5F,GADL,IAEEmC,WAAW,EACX+D,aAAcR,EAAOtF,KACrBA,KAAMF,EACNoC,OAAO,IAEX,IRtCmC,0BQuCjC,OAAO,2BACFtC,GADL,IAEEmC,WAAW,EACXG,OAAO,IAEX,IR3CuB,cQ4CrB,IAAIqD,EACAQ,EACJ,IAAKA,EAAI,EAAGA,EAAInG,EAAMI,KAAKoB,OAAQ2E,IACjC,GAAInG,EAAMI,KAAK+F,GAAG1F,UAAYiF,EAAOvE,UAAUV,QAAS,CACtDkF,EAAK,eAAQ3F,EAAMI,KAAK+F,IACxB,MAGJR,EAAMpF,WAAWmF,EAAO7E,WAAa,KACrC,IAIIuF,EAOAC,EACAC,EAZAlG,EAAI,YAAOJ,EAAMI,MAKrB,IAJAA,EAAK+F,GAAKR,EAILQ,EAAI,EAAGA,EAAInG,EAAMkG,aAAa1E,OAAQ2E,IACzC,GAAInG,EAAMkG,aAAaC,GAAGF,UAAYP,EAAOvE,UAAUV,QAAS,CAC9D2F,EAAK,eAAQpG,EAAMkG,aAAaC,IAChC,MAKJ,IAAKE,EAAI,EAAGA,EAAID,EAAMP,WAAWrE,OAAQ6E,IACvC,GACE,IAAIP,KAAKM,EAAMP,WAAWQ,GAAGP,MAAMC,UAAY,IAC/CL,EAAO7E,UACP,CACAyF,EAAK,eAAQF,EAAMP,WAAWQ,IAC9B,MAGJC,EAAMC,SAAWb,EAAO1E,aACxB,IAAIkF,EAAY,YAAOlG,EAAMkG,cAE7B,OADAA,EAAaC,GAAGN,WAAWQ,GAAKC,EACzB,2BACFtG,GADL,IAEEI,OACA8F,iBAGJ,QACE,OAAOlG,M,yBEzFAwG,EAAuB,SAACxG,GAAD,OAAWA,EAAMG,cAAc+F,c,WCUlDO,G,WAaAC,G,WASQtE,GAtBlB,SAAUqE,EAAmBf,GAA7B,uEACL,OADK,SACCiB,YVIC,CAAEvF,KCdyB,yBSS7B,OAIY,OAJZ,kBAIkBwF,MAAM,qBAAqBC,MAAK,SAACC,GAAD,OACnDA,EAASC,UALR,OAOH,OAHID,EAJD,gBAOGH,YVCD,CACLvF,KChBmC,0BDiBnCiB,UUHgCyE,EAASE,YAPtC,+BASH,OATG,oCASGL,YVKD,CACLvF,KCrBiC,0BSM9B,sDAaA,SAAUsF,EAA2BhB,GAArC,uEACgB,OADhB,SACsBuB,YAAOT,GAD7B,OAGL,OAFIU,EADC,gBAGCN,MAAM,sBAAuB,CACjCO,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEhH,IAAK4G,MALzB,uCASQ,SAAU9E,IAAV,iEACb,OADa,SACPmF,YTjCuB,mBSiCKd,GADrB,OAEb,OAFa,SAEPc,YT3ByB,oBS2BKb,GAFvB,uC,eCxBEc,G,WAaQrH,GAblB,SAAUqH,EAAoB9B,GAA9B,uEACL,OADK,SACCiB,YbKC,CACLvF,KCdkC,2BYO/B,OAIY,OAJZ,kBAIkBwF,MAAM,sBAAsBC,MAAK,SAACC,GAAD,OACpDA,EAASC,UALR,OAOH,OAHID,EAJD,gBAOGH,YbID,CACLvF,KClBqC,4BDmBrChB,KaNiC0G,EAASxG,MAPvC,+BASH,OATG,oCASGqG,YbQD,CACLvF,KCvBmC,4BYKhC,sDAaQ,SAAUjB,IAAV,iEACb,OADa,SACPoH,YZtByB,oBYsBKC,GADvB,uCCTf,IAAMC,EAAmBrC,OAAOsC,sCAAwCxC,IAEpEyC,EAAiBC,cACjBC,EAAQC,YACVC,EACAN,EAAiBO,YAAgBL,KAGnCA,EAAeM,IAAIC,GACnBP,EAAeM,IAAIE,GAEnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,QAGJU,SAASC,eAAe,SPsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAxG,GACLyG,QAAQzG,MAAMA,EAAM0G,c","file":"static/js/main.ca8124e3.chunk.js","sourcesContent":["export const calculateWorkOrders = (state, date) => {\n  let temp = [];\n  state.workOrderList.jobs.forEach((job) => {\n    job.workOrders[date] &&\n      temp.push({ jobName: job.jobName, workOrderName: job.workOrders[date] });\n  });\n  return temp;\n};\n","import React, { memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { calculateWorkOrders } from \"./selectors\";\nimport { Paper, Grid, Divider, Typography } from \"@material-ui/core\";\nimport { assignTask } from \"../WorkOrderList/actions\";\nimport { updateEmployeeAssignment } from \"../AssignmentTable/actions\";\nfunction PoppedContent({ workOrders, assignTask }) {\n  return (\n    <div style={{ padding: 16 }}>\n      {workOrders.length ? (\n        workOrders.map((workOrder, index) => {\n          return (\n            <Paper\n              key={index}\n              className=\"task clickable\"\n              onClick={() => assignTask(workOrder)}\n            >\n              {workOrder.workOrderName}\n              <Divider variant=\"middle\"></Divider>\n              {workOrder.jobName}\n            </Paper>\n          );\n        })\n      ) : (\n        <Typography variant=\"body2\">\n          No Tasks available for this date\n        </Typography>\n      )}\n    </div>\n  );\n}\nconst mapStateToProps = (state, { dateIndex }) => {\n  return {\n    workOrders: calculateWorkOrders(state, dateIndex),\n  };\n};\nconst mapDispatchToProps = (\n  dispatch,\n  { dateIndex, employeeIndex, employeeName, handleClose }\n) => {\n  return {\n    assignTask: (workOrder) => {\n      dispatch(assignTask(dateIndex, employeeName, workOrder));\n      dispatch(updateEmployeeAssignment(dateIndex, employeeIndex, workOrder));\n\n      handleClose();\n    },\n  };\n};\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(PoppedContent);\nexport default memo(withConnect);\n","import {\n  FETCH_WORK_ORDERS,\n  FETCH_WORK_ORDERS_INIT,\n  FETCH_WORK_ORDERS_SUCCESS,\n  FETCH_WORK_ORDERS_ERROR,\n  ASSIGN_TASK,\n} from \"./constants\";\n\nexport function fetchWorkOrders() {\n  return {\n    type: FETCH_WORK_ORDERS,\n  };\n}\nexport function fetchWorkOrdersInit() {\n  return {\n    type: FETCH_WORK_ORDERS_INIT,\n  };\n}\nexport function fetchWorkOrdersSuccess(jobs) {\n  return {\n    type: FETCH_WORK_ORDERS_SUCCESS,\n    jobs,\n  };\n}\nexport function fetchWorkOrdersError() {\n  return {\n    type: FETCH_WORK_ORDERS_ERROR,\n  };\n}\nexport function assignTask(dateIndex, employeeName, workOrder) {\n  return {\n    type: ASSIGN_TASK,\n    dateIndex,\n    employeeName,\n    workOrder,\n  };\n}\n","export const FETCH_WORK_ORDERS = \"FETCH_WORK_ORDERS\";\nexport const FETCH_WORK_ORDERS_INIT = \"FETCH_WORK_ORDERS_INIT\";\nexport const FETCH_WORK_ORDERS_SUCCESS = \"FETCH_WORK_ORDERS_SUCCESS\";\nexport const FETCH_WORK_ORDERS_ERROR = \"FETCH_WORK_ORDERS_ERROR\";\nexport const ASSIGN_TASK = \"ASSIGN_TASK\";\n","import {\n  FETCH_EMPLOYEES,\n  FETCH_EMPLOYEES_INIT,\n  FETCH_EMPLOYEES_SUCCESS,\n  FETCH_EMPLOYEES_ERROR,\n  UPDATE_EMPLOYEE_ASSIGMENT,\n  SAVE_EMP_ASSIGNMT,\n} from \"./constants\";\n\nexport function fetchEmployees() {\n  return {\n    type: FETCH_EMPLOYEES,\n  };\n}\nexport function fetchEmployeessInit() {\n  return { type: FETCH_EMPLOYEES_INIT };\n}\nexport function fetchEmployeesSuccess(employees) {\n  return {\n    type: FETCH_EMPLOYEES_SUCCESS,\n    employees,\n  };\n}\nexport function fetchEmployesError() {\n  return {\n    type: FETCH_EMPLOYEES_ERROR,\n  };\n}\nexport function updateEmployeeAssignment(dateIndex, employeeIndex, workOrder) {\n  return {\n    type: UPDATE_EMPLOYEE_ASSIGMENT,\n    dateIndex,\n    employeeIndex,\n    workOrder,\n  };\n}\n\nexport function saveEmployeeAssignment() {\n  return {\n    type: SAVE_EMP_ASSIGNMT,\n  };\n}\n","export const FETCH_EMPLOYEES = \"FETCH_EMPLOYEEES\";\nexport const FETCH_EMPLOYEES_INIT = \"FETCH_EMPLOYEES_INIT\";\n\nexport const FETCH_EMPLOYEES_SUCCESS = \"FETCH_EMPLOYEES_SUCCESS\";\nexport const FETCH_EMPLOYEES_ERROR = \"FETCH_EMPLOYEES_ERROR\";\nexport const UPDATE_EMPLOYEE_ASSIGMENT = \"UPDATE_EMPLOYEE_ASSIGMENT\";\n\nexport const SAVE_EMP_ASSIGNMT = \"SAVE_EMP_ASSIGNMT\";\n","import React, { useState, useEffect, memo } from \"react\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport \"./assignmentTable.scss\";\nimport {\n  CircularProgress,\n  Table,\n  Grid,\n  Typography,\n  TableContainer,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableHead,\n  Paper,\n  Divider,\n  Popover,\n  Button,\n} from \"@material-ui/core\";\nimport { fetchEmployees, saveEmployeeAssignment } from \"./actions\";\nimport PoppedContent from \"../PoppedContent\";\n\nfunction AssignmentTable({\n  isLoading,\n  employees,\n  error,\n  fetchEmployees,\n  saveEmployeeAssignment,\n}) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [dateIndex, setDateIndex] = useState(\"\");\n  const [employeeIndex, setEmployeeIndex] = useState(\"\");\n  const [employeeName, setEmployeeName] = useState(\"\");\n\n  const handleClick = (dateIndex, employeeIndex, employeeName) => {\n    return (event) => {\n      setAnchorEl(event.currentTarget);\n      setDateIndex(dateIndex);\n      setEmployeeIndex(employeeIndex);\n      setEmployeeName(employeeName);\n    };\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n  return (\n    <Grid container item justify=\"flex-end\">\n      {isLoading ? (\n        <CircularProgress color=\"primary\"></CircularProgress>\n      ) : error ? (\n        <Typography>Some Error Occurred</Typography>\n      ) : (\n        <>\n          <Grid item xs={6}>\n            <Typography variant=\"h6\">Assign Tasks!</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={saveEmployeeAssignment}\n            >\n              Save\n            </Button>\n          </Grid>\n          <TableContainer>\n            <Table className=\"table\">\n              <TableHead>\n                <TableRow className=\"headers\">\n                  <TableCell>Employee Name</TableCell>\n                  <TableCell>20 April</TableCell>\n                  <TableCell> 21 April</TableCell>\n                  <TableCell> 22 April</TableCell>\n                  <TableCell> 23 April</TableCell>\n\n                  <TableCell> 24 April</TableCell>\n                  <TableCell> 25 April</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {employees.map((employee, employeeIndex) => {\n                  return (\n                    <TableRow key={employeeIndex} className=\"table-row\">\n                      <TableCell component=\"th\" scope=\"row\">\n                        {employee.Name}\n                      </TableCell>\n                      {employee.workOrders.map((workOrder, index) => {\n                        return (\n                          <TableCell\n                            key={index}\n                            onClick={handleClick(\n                              index,\n                              employeeIndex,\n                              employee.Name\n                            )}\n                          >\n                            {workOrder && (\n                              <Paper className=\"task\">\n                                {workOrder.workOrderName}\n                                <Divider variant=\"middle\"></Divider>\n                                {workOrder.jobName}\n                              </Paper>\n                            )}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"right\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n            style={{ minHeight: 500, minWidth: 600 }}\n          >\n            <PoppedContent\n              handleClose={handleClose}\n              dateIndex={dateIndex}\n              employeeIndex={employeeIndex}\n              employeeName={employeeName}\n            ></PoppedContent>\n          </Popover>\n        </>\n      )}\n    </Grid>\n  );\n}\nfunction mapStateToProps(state) {\n  return {\n    isLoading: state.assignmentTable.isLoading,\n    employees: state.assignmentTable.employees,\n    error: state.assignmentTable.error,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchEmployees: () => dispatch(fetchEmployees()),\n    saveEmployeeAssignment: () => dispatch(saveEmployeeAssignment()),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AssignmentTable);\nexport default memo(withConnect);\n","import React, { useState, useEffect, memo } from \"react\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport {\n  CircularProgress,\n  Table,\n  Grid,\n  Typography,\n  TableContainer,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableHead,\n  Divider,\n  Paper,\n} from \"@material-ui/core\";\nimport { fetchWorkOrders } from \"./actions\";\n\nfunction WorkOrderList({ isLoading, error, fetchWorkOrders, jobs }) {\n  useEffect(() => {\n    fetchWorkOrders();\n  }, []);\n  return (\n    <Grid container item justify=\"center\">\n      {isLoading ? (\n        <CircularProgress color=\"primary\"></CircularProgress>\n      ) : error ? (\n        <Typography>Some Error Occurred</Typography>\n      ) : (\n        <TableContainer>\n          <Table className=\"table\">\n            <TableBody>\n              {jobs.map((job, index) => {\n                return (\n                  <TableRow key={index} className=\"table-row no-borders\">\n                    <TableCell></TableCell>\n\n                    <TableCell>\n                      {job.workOrders[0] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[0]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {job.workOrders[1] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[1]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {job.workOrders[2] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[2]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {job.workOrders[3] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[3]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {job.workOrders[4] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[4]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {job.workOrders[5] && (\n                        <Paper className=\"task\">\n                          {job.workOrders[5]}\n                          <Divider variant=\"middle\"></Divider>\n                          {job.jobName}\n                        </Paper>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Grid>\n  );\n}\nfunction mapStateToProps(state) {\n  return {\n    isLoading: state.workOrderList.isLoading,\n    jobs: state.workOrderList.jobs,\n    error: state.workOrderList.error,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return { fetchWorkOrders: () => dispatch(fetchWorkOrders()) };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(memo, withConnect)(WorkOrderList);\n","import React from \"react\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport \"./App.scss\";\nimport AssignmentTable from \"../AssignmentTable\";\nimport WorkOrderList from \"../WorkOrderList\";\n\nfunction App() {\n  return (\n    <>\n      <header></header>\n\n      <main>\n        <Grid container className=\"container\">\n          <AssignmentTable></AssignmentTable>\n          <WorkOrderList></WorkOrderList>\n        </Grid>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  FETCH_EMPLOYEES_INIT,\n  FETCH_EMPLOYEES_ERROR,\n  FETCH_EMPLOYEES_SUCCESS,\n  UPDATE_EMPLOYEE_ASSIGMENT,\n} from \"./constants\";\n\nconst initialState = {\n  isLoading: true,\n  employees: [],\n  error: false,\n};\n\nexport function assignmentTable(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_EMPLOYEES_INIT:\n      return { ...state, isLoading: true };\n    case FETCH_EMPLOYEES_SUCCESS:\n      let temp = action.employees;\n      temp = temp.map((employee) => {\n        let mappedWorkOrders = [null, null, null, null, null, null];\n        return {\n          Name: employee.Name,\n          workOrders: mappedWorkOrders,\n        };\n      });\n\n      return {\n        ...state,\n        isLoading: false,\n        error: false,\n        employees: temp,\n      };\n    case FETCH_EMPLOYEES_ERROR:\n      return {\n        ...state,\n        error: true,\n      };\n    case UPDATE_EMPLOYEE_ASSIGMENT:\n      let temp1 = [...state.employees];\n      temp1[action.employeeIndex].workOrders[action.dateIndex] =\n        action.workOrder;\n      return {\n        ...state,\n        employees: temp1,\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  FETCH_WORK_ORDERS_INIT,\n  FETCH_WORK_ORDERS_SUCCESS,\n  FETCH_WORK_ORDERS_ERROR,\n  ASSIGN_TASK,\n} from \"./constants\";\nimport { useDebugValue } from \"react\";\n\nconst initialState = {\n  isLoading: true,\n  jobs: [],\n  error: false,\n};\nexport function workOrderList(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_WORK_ORDERS_INIT:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case FETCH_WORK_ORDERS_SUCCESS:\n      let temp = action.jobs;\n      temp = temp.map((job) => {\n        let mappedWorkOrders = [null, null, null, null, null, null];\n        job.workorders.forEach((workOrder, index) => {\n          mappedWorkOrders[new Date(workOrder.Date).getDate() % 20] =\n            workOrder.name;\n        });\n        return {\n          jobName: job.jobname,\n          workOrders: mappedWorkOrders,\n        };\n      });\n\n      return {\n        ...state,\n        isLoading: false,\n        jobsAssigned: action.jobs,\n        jobs: temp,\n        error: false,\n      };\n    case FETCH_WORK_ORDERS_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        error: true,\n      };\n    case ASSIGN_TASK:\n      let temp1;\n      let i;\n      for (i = 0; i < state.jobs.length; i++) {\n        if (state.jobs[i].jobName === action.workOrder.jobName) {\n          temp1 = { ...state.jobs[i] };\n          break;\n        }\n      }\n      temp1.workOrders[action.dateIndex] = null;\n      let jobs = [...state.jobs];\n      jobs[i] = temp1;\n\n      // updating orginalJobs for POST api\n      let temp2;\n      for (i = 0; i < state.jobsAssigned.length; i++) {\n        if (state.jobsAssigned[i].jobname === action.workOrder.jobName) {\n          temp2 = { ...state.jobsAssigned[i] };\n          break;\n        }\n      }\n      let j;\n      let temp3;\n      for (j = 0; j < temp2.workorders.length; j++) {\n        if (\n          new Date(temp2.workorders[j].Date).getDate() % 20 ==\n          action.dateIndex\n        ) {\n          temp3 = { ...temp2.workorders[j] };\n          break;\n        }\n      }\n      temp3.Employee = action.employeeName;\n      let jobsAssigned = [...state.jobsAssigned];\n      jobsAssigned[i].workorders[j] = temp3;\n      return {\n        ...state,\n        jobs,\n        jobsAssigned,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport { assignmentTable } from \"./containers/AssignmentTable/reducer\";\nimport { workOrderList } from \"./containers/WorkOrderList/reducer\";\n\nexport default combineReducers({\n  assignmentTable,\n  workOrderList,\n});\n","export const selectEmployeesState = (state) => state.workOrderList.jobsAssigned;\n","import { takeLatest, put, delay, select } from \"redux-saga/effects\";\nimport AssignmentTable from \".\";\nimport { FETCH_EMPLOYEES, SAVE_EMP_ASSIGNMT } from \"./constants\";\nimport {\n  fetchEmployeesSuccess,\n  fetchEmployesError,\n  fetchEmployeessInit,\n} from \"./actions\";\nimport { selectEmployeesState } from \"./selectors\";\n\nexport function* fetchEmployeesSaga(action) {\n  yield put(fetchEmployeessInit());\n  try {\n    // delay(2000);\n    let response = yield fetch(\"getEmployees.json\").then((response) =>\n      response.json()\n    );\n    yield put(fetchEmployeesSuccess(response.Employess));\n  } catch (err) {\n    yield put(fetchEmployesError());\n  }\n}\n\nexport function* saveEmployeeAssignmentSaga(action) {\n  let employeesState = yield select(selectEmployeesState);\n\n  yield fetch(\"postWorkOrders.json\", {\n    method: \"POST\",\n    body: JSON.stringify({ job: employeesState }),\n  });\n}\n\nexport default function* assignmentTable() {\n  yield takeLatest(FETCH_EMPLOYEES, fetchEmployeesSaga);\n  yield takeLatest(SAVE_EMP_ASSIGNMT, saveEmployeeAssignmentSaga);\n}\n","import { takeLatest, put, delay } from \"redux-saga/effects\";\nimport {\n  fetchWorkOrdersInit,\n  fetchWorkOrdersSuccess,\n  fetchWorkOrdersError,\n} from \"./actions\";\nimport { FETCH_WORK_ORDERS } from \"./constants\";\n\nexport function* fetchWorkOrdersSaga(action) {\n  yield put(fetchWorkOrdersInit());\n  try {\n    // yield delay(2000);\n    let response = yield fetch(\"getWorkOrders.json\").then((response) =>\n      response.json()\n    );\n    yield put(fetchWorkOrdersSuccess(response.job));\n  } catch (err) {\n    yield put(fetchWorkOrdersError());\n  }\n}\n\nexport default function* workOrderList() {\n  yield takeLatest(FETCH_WORK_ORDERS, fetchWorkOrdersSaga);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducer\";\n// import rootSaga from \"./saga\";\nimport assignmentTableSaga from \"./containers/AssignmentTable/saga\";\nimport workOrderListSaga from \"./containers/WorkOrderList/saga\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet sagaMiddleware = createSagaMiddleware();\nlet store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(assignmentTableSaga);\nsagaMiddleware.run(workOrderListSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}